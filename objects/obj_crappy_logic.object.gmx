<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//there are three game states
//state 0 == game_start
//state 1 == game_playing
//state 2 == game_over
global.game_state = 0;

//debugging
global.debug = false;


//create the crappy bird player object
//around the middle left center of the 
//screen
instance_create(view_xview[0] + view_wview[0]/2 - 100, view_yview[0] + view_hview[0]/2, obj_crappy_bird);

//create a score object
instance_create(0,0, obj_score);

//for spawning the pipes
pipe_timer_def = 150 * 1/ room_speed;
pipe_time = pipe_timer_def;

//for allowing to be scored
collidable = true;

//for saving the highest score to a file
scored = false;

//create 100 stars initially
for (i =0; i &lt; 35; i++){
    instance_create(random(room_width), random(room_height), obj_star);
}

//create the moon
instance_create(room_width - 100, 150, obj_moon);

//timer for creating future stars
def_star_timer = 35* 1/room_speed;
star_timer = 0;

//depth 
depth = -3

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if playing or starting then scroll the background
if (global.game_state == 0 || global.game_state == 1){
    
} else { //otherwise if the game is over stop everything from moving

     if (instance_exists(obj_pipe_top) &amp;&amp; instance_exists(obj_pipe_bottom) &amp;&amp; instance_exists(obj_star) &amp;&amp; instance_exists(obj_moon)){   
        obj_pipe_top.h_speed = 0;
        obj_pipe_bottom.h_speed = 0;
        obj_star.h_speed = 0;
        obj_moon.h_speed = 0;
     }
}

//for debugging 
//if you press the r button, then the 
//game restarts
if (keyboard_check_released(ord("R"))){
    game_restart();
}

//for debug
//if you press tab
//then enter debug mode
if (global.debug == false &amp;&amp; keyboard_check_released(vk_tab)){
    global.debug = true;
} else if (global.debug == true &amp;&amp; keyboard_check_released(vk_tab)){
    global.debug = false;
}

//spawn the pipes if the game is playing
//create a new pipe, every few seconds
//just to the right of the view
if (global.game_state == 1 &amp;&amp; pipe_time &lt; 0){
    //the pipes are always the same distance apart
    //but they appear to have random lengths
    variable_shift = random_range(0, 300);
    r_color = make_colour_hsv(random(255), 255, 255);
    p_top = instance_create(view_xview[0] + view_wview[0] + 100, view_yview[0] - 325 + variable_shift, obj_pipe_top);
    p_bottom = instance_create(view_xview[0] + view_wview[0] + 100, view_yview[0] + view_hview[0] + variable_shift, obj_pipe_bottom);
    pipe_time = pipe_timer_def;
    p_top.image_blend = r_color;
    p_bottom.image_blend = r_color;

}
//decrease the pipe time
pipe_time -= 1/ room_speed;

//if the player crosses the red line
//then add a point to their score
if (instance_exists(obj_pipe_top)){
    if (collision_line(obj_pipe_top.x, obj_pipe_top.y, obj_pipe_top.x, obj_pipe_top.y + 600, obj_crappy_bird, true, false)){
            if (collidable){
                obj_score.score_val++;
                audio_play_sound(sound_coin, 0, 0);
                collidable = false;
            }
    } else {
        collidable = true;
    }
}


//do the file stuff if the
//game is over it hasn't been done
//already
if (global.game_state == 2 &amp;&amp; scored == false){
    scored = true;
    ini_open(working_directory + "save.ini");
    highscore = ini_read_real("save1", "score", 0);
    if (obj_score.score_val &gt; highscore){
        ini_write_real("save1", "score", obj_score.score_val);
    }
    
}

//create stars
if (star_timer &lt;=0){
    star_timer = def_star_timer;
    instance_create(room_width+ random(400), random(600), obj_star);
}

star_timer-= 1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make the background black
background_colour = c_black; 
//set the debugging font
draw_set_font(font_debug);

//more debugging 
if (global.debug){
    if (instance_exists(obj_crappy_bird)){
        draw_text(view_xview[0] + view_wview[0]/2, view_yview[0] + 400, "V ACC: " + string(obj_crappy_bird.v_acc));
        draw_text(view_xview[0] + view_wview[0]/2, view_yview[0] + 500, "GRAVITY: " + string(obj_crappy_bird.gravity));
        draw_text(view_xview[0] + view_wview[0]/2, view_yview[0] + 300, "GAME STATE: " + string(global.game_state));
        if (instance_exists(obj_pipe_top)){
            draw_set_color(c_red);
            draw_line(obj_pipe_top.x, obj_pipe_top.y, obj_pipe_top.x, obj_pipe_top.y + 600);
        }
    }
}

//draw the final score and the best score
//after the file has been opened
if (scored &amp;&amp; global.game_state == 2){
    draw_set_font(font_pixel);
    draw_set_color(c_white);
    
    draw_text_transformed(view_xview[0] + view_wview[0]/2, view_yview[0] + 100, "SCORE: " + string((obj_score.score_val)), .45, .45, 0);
        if (obj_score.score_val &gt; highscore){
            draw_text_transformed(view_xview[0] + view_wview[0]/2, view_yview[0] + 200, "BEST: " + string((obj_score.score_val)), .45, .45, 0);
        } else {
            draw_text_transformed(view_xview[0] + view_wview[0]/2, view_yview[0] + 200, "BEST: " + string((highscore)), .45, .45, 0);
        }
    draw_set_color(c_yellow);
    draw_text_ext_transformed(view_xview[0] + view_wview[0]/2, view_yview[0] + 300, "CLICK OR PRESS SPACEBAR TO RETRY", 100, 1100, .25, .25, 0);
    ini_close();  
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
